/*
 * Simple parser - test project for parsing some SQL features
 */

options  {
	STATIC			= false;
	
	FORCE_LA_CHECK	= true;
	LOOKAHEAD		= 1;
	
	DEBUG_PARSER 	= true;
	DEBUG_LOOKAHEAD = true;
	ERROR_REPORTING = true;
	
	IGNORE_CASE 	= true;
}

PARSER_BEGIN(PlpgsqlParser)

	package com.google.dbtools;

	import com.google.dbtools.plpgsql
	class PlpgsqlParser{
		
	
	}

PARSER_END(PlpgsqlParser)

SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}

TOKEN:{
		<K_ACCESS_SHARE: "access_share">
	|	<K_ACCESS_EXCLUSIVE: "access_exclusive">
    |	<K_ACTION: "action">
	|	<K_ADD: "add">
	|	<K_AFTER: "after">
	|	<K_ALL: "all">
	|	<K_ALTER: "alter">
	|	<K_AND: "and">
	|	<K_ARRAY: "array">
	|	<K_AS: "as">
	|	<K_ASC: "asc">
	|	<K_AT: "at">
	|	<K_BEFORE: "before">
	|	<K_BIGINT: "bigint">
    |	<K_BOOLEAN: "boolean">
    |	<K_BTREE: "btree">
	|	<K_BEGIN: "begin">
	|	<K_BETWEEN: "between">
    |	<K_BY: "by">
    |	<K_CASCADE: "cascade">
    |	<K_CASE: "case">
   	|	<K_CHAR: "char">
    |	<K_CHARACTER: "character">
	|	<K_CHARACTER_VARYING: "character varying">
	|	<K_CHECK: "check">
	|	<K_COLUMN: "column">
	|	<K_COMMENT: "comment">
	|	<K_CONCURRENTLY: "concurrently">
    |	<K_CONSTRAINT: "constraint">
    |	<K_CONTINUE: "continue">
    |	<K_COST: "cost">
    |	<K_CREATE: "create">
    |	<K_CROSS: "cross">
	|	<K_DEBUG: "debug">
	|	<K_DECLARE: "declare">
	|	<K_DEFAULT: "default">
	|	<K_DELETE: "delete">
	|	<K_DESC: "desc">
	|	<K_DEFERRABLE: "deferrable">
	|	<K_DEFERRED: "deferred">
	|	<K_DISTINCT: "distinct">
	|	<K_DOUBLE: "double">
	|	<K_EACH: "each">
	|	<K_ELSE: "else">
	|	<K_ELSIF: "elsif"| "elseif">
	|	<K_END: "end">
    |	<K_EXCEPTION: "exception">
	|	<K_EXCEPT: "except">
 	|	<K_EXCLUSIVE: "exclusive">
 	|	<K_EXECUTE: "execute">
	|	<K_EXIT: "exit">
    |	<K_FALSE: "false">
    |	<K_FOR: "for">
    |	<K_FOREIGN_KEY: "foreign key">
    |	<K_FULL: "full">
    |	<K_FROM: "from">
	|	<K_FUNCTION: "function">
	|	<K_GRANT: "grant">
	|	<K_GROUP: "group">
    |	<K_HAVING: "having">
    |	<K_HASH: "hash">
    |	<K_IF: "if">
    |	<K_IMMEDIATE: "immediate">
	|	<K_IN: "in">
	|	<K_INNER: "inner">
	|	<K_INDEX: "index">
    |	<K_INFO: "info">
	|	<K_INT: "int">
	|	<K_INITIALLY: "initially">
	|	<K_INTERSECT: "intersect">
	|	<K_INTO: "into">
    |	<K_INSERT: "insert">
    |	<K_INSTEAD_OF: "instead of">
    |	<K_INTEGER: "integer">
	|	<K_INTERVAL: "interval">
	|	<K_IS: "is">
	|	<K_JOIN: "join">
    |	<K_LANGUAGE: "language">
	|	<K_LANG_PLPGSQL: "plpgsql">
	|	<K_LANG_SQL: "sql">
	|	<K_LEFT: "left">
	|	<K_LIMIT: "limit">
    |	<K_LOCAL: "local">
    |	<K_LOCK: "lock">
    |	<K_LOOP: "loop">
	|	<K_LOG: "log">
	|	<K_MATCH: "match">
	|   <K_MOD: "mod" | "%">
	|	<K_MODE: "mode">
	|	<K_NEXT: "next">
	|   <K_NO: "no">
    |   <K_NOT: "not">
	|	<K_NOTICE: "notice">
    |   <K_NULL: "null">
    |	<K_OFFSET: "offset">
    |	<K_ON: "on">
	|	<K_ONLY: "only">
    |	<K_OUT: "out">
    |	<K_OUTER: "outer">
	|	<K_OR: "or">
	|	<K_ORDER: "order">
   	|	<K_OWNER: "owner">
   	|	<K_PARTIAL: "partial">
   	|	<K_REFERENCES: "references">
   	|	<K_PERFORM: "perform">
   	|	<K_PRECISION: "precision">
   	|	<K_PRIMARY_KEY: "primary key">
    |	<K_PROCEDURE: "procedure">
    |	<K_QUERY: "query">
    |	<K_RAISE: "raise">
	|	<K_REPLACE: "replace">
	|	<K_RESTRICT: "restrict">
	|	<K_RETURN: "return">
	|	<K_RETURNING: "returning">
	|	<K_RETURNS: "returns">
	|	<K_REVOKE: "revoke">
	|	<K_RIGHT: "right">
	|	<K_ROW_SHARE: "row share">
	|	<K_ROW_EXCLUSIVE: "row exclusive">
	|	<K_ROW: "row">
	|	<K_SECURITY_DEFINER: "security definer">
	|	<K_SELECT: "select">
	|	<K_SESSION: "session">
	|	<K_SET: "set">
	|	<K_SETOF: "setof">
	|	<K_SHARE_UPDATE_EXCLUSIVE: "share update exclusive">
	|	<K_SHARE_ROW_EXCLUSIVE: "share row exclusive">
	|	<K_SHARE: "share">
	|	<K_SIMPLE: "simple">
	|	<K_SMALLINT: "smallint">
	|	<K_STATEMENT: "statement">
	|	<K_TABLE: "table">
	|	<K_TEMPORARY: "temporary">
	|	<K_TEXT: "text">
	|	<K_THEN: "then">
	|	<K_TIMESTAMP: "timestamp">
    |	<K_TIME: "time">
	|	<K_TO: "to">
	|	<K_TRIGGER: "trigger">
	|	<K_TRUE: "true">
    |	<K_TRUNCATE: "truncate">
    |	<K_TYPE: "type">
    |	<K_UNIQUE: "unique">
    |	<K_UNION: "union">
    |	<K_UPDATE: "update">
    |	<K_USING: "using">
    |	<K_VALUES: "values">
    |	<K_VARCHAR: "varchar">
	|	<K_VOID: "void">
    |	<K_WARNING: "warning">
	|	<K_WHERE: "where">
	|	<K_WHEN: "when">
	|	<K_WHILE: "while">
	|	<K_WITH: "with">
	|	<K_WITHOUT: "without">
    |	<K_ZONE: "zone">

	|	<P_SEARCH_PATH: "search_path" >
	|	<P_WORK_MEM: "work_mem" >
	|	<S_SEPERATOR: ";">
	|	<S_EQUALS: "=">
	|   <S_ASSIGNER: ":=">

	|	<EXCEPTION_ERROR: <ERR_OTHERS> | <ERR_UNIQUE_VIOLATION> >
	|	<#ERR_OTHERS: "others">
	|	<#ERR_UNIQUE_VIOLATION: "unique_violation">

	|	< S_IDENTIFIER: (<LETTER> | "_" )+ (<DIGIT> | <LETTER> | "_" )* >
	| 	< LETTER: ["a"-"z", "A"-"Z"] >

	|	<S_DOC_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

SPECIAL_TOKEN:{
		<ST_SINGLE_LINE_COMMENT: "--"(~["\r","\n"])*>
	|	<ST_MULTILINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">

}

TOKEN : /* Numeric Constants */
{
	< S_NUMBER: <FLOAT>
	    | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )?
    	>
  | 	< #FLOAT: <S_INTEGER>
	    | <S_INTEGER> ( "." <S_INTEGER> )?
	    | "." <S_INTEGER>
    	>
  | 	<S_INTEGER: ( <DIGIT> )+ >
  | 	<DIGIT: ["0" - "9"] >
  | < S_CHAR_LITERAL: ("E")? "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
}


/** root production */
List<Statement> parseSimple():
{
}
{
	StatementSequence() 
	<EOF>
	{return null;}
}

void ObjectName():
{}
{
    <S_IDENTIFIER> ("." <S_IDENTIFIER>)?
}

// 
void StatementSequence():
{
}
{
	(
		Statement() 
		(<S_SEPERATOR>)+
	)+
}

void Statement():
{
}
{
		SetParameter()
	|  	LOOKAHEAD(3) FunctionDeclaration()
	|	LOOKAHEAD(4) AlterOwnerStatement()
	|	LOOKAHEAD(2) CreateTypeStatement()
	|	GrantStatement()
	|	RevokeStatement()
	|	LOOKAHEAD(2) CreateTableStatement()
	|	AlterTable()
	|	LOOKAHEAD(2) CreateIndex()
	|	CreateTrigger()
	|	CommentStatement()
}

// SET PARAMETER ////////////////////////////////////////////////////////
void SetParameter():
{
}
{
	<K_SET> [ <K_LOCAL> | <K_SESSION> ]	
	( <P_SEARCH_PATH> | <P_WORK_MEM> )
	( <K_TO> | <S_EQUALS> | <S_ASSIGNER> )
	(
			( ObjectName() ( "," ObjectName() )* )
		|	<S_CHAR_LITERAL>
	)
}	

// PLSQL FUNCTION STATEMENT ////////////////////////////////////////////////////////
void FunctionDeclaration():
{}
{
	<K_CREATE> [ <K_OR> <K_REPLACE> ] <K_FUNCTION>
	ObjectName() "(" [ParameterList()] ")"
	<K_RETURNS> (
			TypeDefinition()
		| 	<K_VOID>
		| 	<K_TRIGGER>
		| 	( <K_TABLE> "("  ColumnDefinition() ( "," ColumnDefinition() )* ")" )
	)
	<K_LANGUAGE> ( <K_LANG_PLPGSQL> | <K_LANG_SQL> )
	[ <K_SECURITY_DEFINER> ]
	[ <K_COST> <S_NUMBER> ]
	<K_AS>
	FunctionBody()
}

void ParameterList():
{}
{
    ( Parameter() ( "," Parameter() )* )
}

void Parameter():
{}
{
    <S_IDENTIFIER> TypeDefinition()
}

void TypeDefinition():
{}
{
	[ <K_SETOF> ]
 	(		<K_BIGINT> |<K_BOOLEAN> | <K_INT> | <K_INTEGER> | <K_INTERVAL> | <K_TEXT>
 		| 	<K_CHARACTER> ["(" <S_NUMBER> ")"] | <K_CHAR> ["(" <S_NUMBER> ")"]
 		| (<K_CHARACTER_VARYING> | <K_VARCHAR> )["(" <S_NUMBER> ")"]
 		|	<K_SMALLINT> | <K_TIMESTAMP> [( <K_WITH> | <K_WITHOUT>) <K_TIME> <K_ZONE>]
 		|	<K_DOUBLE> <K_PRECISION>
 	
 		|	ObjectName()
 	) ("[" [<S_NUMBER>] "]")*
}

void FunctionBody():
{
	String quoteTag;	
}
{
	QuotedTag()
	[ Comment() ]
	(
			PlSqlBlock()
		|
		(
			[ SetParameter() ";" ]
			UnionStatement()
		)
	)
	(<S_SEPERATOR>)*
	QuotedTag()
}

void PlSqlBlock():
{
}
{
	[
		<K_DECLARE>
		[ Comment() ]
        VariableDeclarationList()
	]
	<K_BEGIN>
		PlSqlStatementList()
	[ <K_EXCEPTION>
			(
				<K_WHEN> <EXCEPTION_ERROR>
				<K_THEN> PlSqlStatementList()
			)+
	]
	<K_END>
}

void PlSqlStatementList():
{}
{
	(
		(
				PlSqlStatement()
			| 	( ( <K_CONTINUE> | <K_EXIT> ) [ ObjectName() ] [ <K_WHEN> PlSqlExpression() ] )
		)
		<S_SEPERATOR>
	)*
}

void QuotedTag():
{}
{
	"$" ( <S_IDENTIFIER> )? "$"
}

void Comment():
{}
{
	<S_DOC_COMMENT>		
}

void VariableDeclarationList():
{}
{
    ( VariableDeclaration() )*
}
void VariableDeclaration():
{
}
{
	<S_IDENTIFIER> TypeDefinition() [ (<K_DEFAULT> | <S_EQUALS> | <S_ASSIGNER>) PlSqlExpression()] (<S_SEPERATOR>)+
}

void PlSqlExpression():
{
}
{
     PlSqlAndExpression() ( <K_OR> PlSqlAndExpression() )*
}

void PlSqlAndExpression():
{}
{
    PlSqlUnaryLogicalExpression() ( <K_AND> PlSqlUnaryLogicalExpression())*
}

void PlSqlUnaryLogicalExpression():
{}
{
  [ <K_NOT> ] PlSqlRelationalExpression()
}

void PlSqlRelationalExpression():
{}
{
    PlSqlSimpleExpression()
    [ 		( [ "!" ]
    			( <S_EQUALS> | "<=" | "=<" | ">=" | "=>" | "<" | ">" | "<>" | "~" ) PlSqlSimpleExpression()
    		)
    	| 	( <K_IS> [ <K_NOT> ] <K_NULL> )
    	|	( <K_BETWEEN> PlSqlSimpleExpression() <K_AND> PlSqlSimpleExpression() )
    	|	( 
    			[ <K_NOT> ] <K_IN>
    			(
    				LOOKAHEAD(4)PlSqlPrimaryExpression()
    				|
    				(
						"("
							PlSqlSimpleExpression() ("," PlSqlSimpleExpression())+
						")"
					)
				)
    		)
    ]
}

void PlSqlSimpleExpression():
{}
{
	PlSqlMultiplicativeExpression()
    (
    	LOOKAHEAD(2)
    	(
    		"+" | "-" | "||"
    		| "|" | "&" | "<<" | ">>"	// bit operations
    	)
        PlSqlMultiplicativeExpression()
    )*
}


void PlSqlMultiplicativeExpression():
{}
{
    PlSqlExponentExpression() (  ("*" | "/" | <K_MOD> | (  <K_AT> <K_TIME> <K_ZONE> ) ) PlSqlExponentExpression())*
}

void PlSqlExponentExpression():
{}
{
    PlSqlUnaryExpression() ( "**" PlSqlUnaryExpression())*
}

void PlSqlUnaryExpression():
{}
{
	LOOKAHEAD(2)
    	(("+" | "-") PlSqlPrimaryExpression())
	|  	PlSqlPrimaryExpression()
}


void PlSqlPrimaryExpression():
{
}
{
	(
			<S_NUMBER>
		|	LOOKAHEAD(4) FunctionCall()
		|	LOOKAHEAD(3) ObjectName() ( "[" PlSqlExpression() [ ":" PlSqlExpression() ] "]" )*
		|   <S_CHAR_LITERAL>
		|   <K_NULL>
		|   <K_TRUE>
		|   <K_FALSE>
		|   LOOKAHEAD(2) <S_IDENTIFIER>
		|	"$" <S_NUMBER>
		|	ArrayExpression()
		|   CaseExpression()
		| 	"("
				(
						LOOKAHEAD(4) UnionStatement()
					| 	PlSqlExpression()
				)
			")"
    )
    [ "::" TypeDefinition() ]
}

void FunctionCall():
{}
{
	(		<K_ARRAY>
	 	|	<K_ROW>
		| 	ObjectName()
	)
	"("
		[		LOOKAHEAD(2) SelectStatement()
			| 	PlSqlExpression()

			[(<K_FROM> PlSqlPrimaryExpression() <K_FOR> PlSqlPrimaryExpression()) ]
			("," PlSqlExpression())*
		]
	")"
}

// TODO: more generic approach 
void ArrayExpression():
{}
{
	<K_ARRAY> ( 
		  LOOKAHEAD(2) ArrayDimension() 
		| LOOKAHEAD(2) ArrayDimension2() 
		| LOOKAHEAD(2) ArrayDimension3() 
	) 
}

void ArrayDimension():
{}
{
	"["
		(
			PlSqlExpression() ( "," PlSqlExpression() )* 
		)
	"]"
}

void ArrayDimension2():
{}
{
	"["
		(
			ArrayDimension() ( "," ArrayDimension() )* 
		)
	"]"
}

void ArrayDimension3():
{}
{
	"["
		(
			ArrayDimension2() ( "," ArrayDimension2() )* 
		)
	"]"
}

void CaseExpression():
{}
{
	<K_CASE> [ObjectName()]
		( <K_WHEN> PlSqlExpression() <K_THEN> PlSqlExpression() )+
		[ <K_ELSE> PlSqlExpression() ] 
	<K_END>
}

////////////////////////////////////////////////////////////////////////////////////////////////
void PlSqlStatement():
{
}
{
		PlSqlBlock()
	|	SetParameter()
	|	ExecuteStatement()
    |	AssignmentStatement()
    |	RaiseStatement()
    |	IfStatement()
    |	LOOKAHEAD(3) UnionStatement()
    |	InsertStatement()
    |	UpdateStatement()
    |	Loop()
    |	ForLoop()
    |	WhileLoop()
    |	PerformStatement()
    |   DeleteStatement()
    |	CaseStatement()
	|   ReturnStatement()
	|	LockStatement()
	|	CreateTableStatement()
}

void ExecuteStatement():
{}
{
	<K_EXECUTE> PlSqlExpression()
	[ <K_INTO> ObjectName() ]
}

void AssignmentStatement():
{}
{
		ObjectName() [ "[" PlSqlExpression() "]" ] ( <S_EQUALS> | <S_ASSIGNER> ) PlSqlExpression()
}

void RaiseStatement():
{}
{
    <K_RAISE>
	[ <K_DEBUG> | <K_LOG> | <K_INFO> | <K_NOTICE> | <K_WARNING> | <K_EXCEPTION> ]
	<S_CHAR_LITERAL>
	( "," PlSqlRelationalExpression() )*
}

void IfStatement():
{}
{
	<K_IF> PlSqlExpression() <K_THEN>
		PlSqlStatementList()
	( <K_ELSIF> PlSqlExpression() <K_THEN> PlSqlStatementList() )*
	[ <K_ELSE> PlSqlStatementList() ]
	<K_END> <K_IF>
}

void UnionStatement():
{}
{
	(
		SelectStatement()
		|
		SelectStatementWithBrackets()
	)
	(
		( <K_UNION> | <K_INTERSECT> | <K_EXCEPT> )
		(	SelectStatement()
        |
        	SelectStatementWithBrackets()
        )
	)*
	[ OrderClause() ]
	[ <K_LIMIT> PlSqlPrimaryExpression() ]
}

void SelectStatementWithBrackets():
{}
{
	"(" SelectStatement() ")"
}
void SelectStatement():
{}
{
	(<K_SELECT> | <K_PERFORM>) SelectList()
	[ LOOKAHEAD(2)	IntoClause() ]
	[ FromClause() ]
	[ LOOKAHEAD(3) WhereClause() ]
	[ LOOKAHEAD(2) GroupClause() ]
	[ LOOKAHEAD(2) OrderClause() ]
	[ LOOKAHEAD(2) HavingClause()]
	[ <K_LIMIT> PlSqlPrimaryExpression() ]
    [ <K_OFFSET> PlSqlPrimaryExpression() ]
	[ <K_FOR> <K_UPDATE> ]
}

void SelectList():
{}
{   // TODO check the proper select list
	[ <K_DISTINCT> ]
	(
			LOOKAHEAD(4) ( [ ObjectName() "." ] ) "*"
		|
			PlSqlExpression() [ [<K_AS>] ObjectName() ]
			( "," PlSqlExpression() [ [<K_AS>] ObjectName() ] )*
	)
}

void FromClause():
{}
{
	<K_FROM> FromItem() ( "," FromItem())*
}

void FromItem():
{}
{
	( 		LOOKAHEAD(4) FunctionCall()
		|	( ObjectName() [ [ <K_AS> ] <S_IDENTIFIER> ] )
		| 	( "(" UnionStatement() ")" [ <K_AS> ] ObjectName() )
	) [ [ <K_AS> ] ObjectName() ]
	(JoinClause())*
}

void JoinClause():
{}
{
	[ 		<K_INNER>
		| 	( ( <K_LEFT> | <K_RIGHT> | <K_FULL> ) [<K_OUTER>] )
		|	<K_CROSS>
	]
	<K_JOIN> ( ObjectName() |  ( "(" SelectStatement() ")" ) ) 	[ [ <K_AS> ] ObjectName() ] <K_ON> PlSqlExpression()
}

void IntoClause():
{
}
{
	<K_INTO> ObjectName() ( "," ObjectName() )*
}
void WhereClause():
{}
{
	<K_WHERE> PlSqlExpression()
}

void GroupClause():
{}
{
	<K_GROUP> <K_BY> <S_IDENTIFIER> ( "," <S_IDENTIFIER>)*
}

void OrderClause():
{
}
{
	<K_ORDER> <K_BY> ObjectName() [ <K_DESC> | <K_ASC> ] ( "," ObjectName() [ <K_DESC> | <K_ASC> ] )*
}

void HavingClause():
{}
{
	<K_HAVING> PlSqlExpression()
}

void ReturningClause():
{}
{
    <K_RETURNING> SelectList()
    [ <K_INTO>  ObjectName() ( "," ObjectName() )* ]
}

void InsertStatement():
{
}
{
	<K_INSERT> <K_INTO> ObjectName()
	[ "(" <S_IDENTIFIER> ( "," <S_IDENTIFIER>)* ")" ]
	(
			<K_VALUES>
			ValuesClause() ( "," ValuesClause() )*
		|   UnionStatement()
	)
	[ ReturningClause() ]
}

void ValuesClause():
{}
{
	"("
		( PlSqlExpression() | <K_DEFAULT> )
		( "," (PlSqlExpression() | <K_DEFAULT>) )*
	")"
}

void UpdateStatement():
{
}
{
	<K_UPDATE> ObjectName()
    <K_SET> <S_IDENTIFIER> <S_EQUALS> PlSqlExpression()
    ( "," <S_IDENTIFIER> <S_EQUALS> PlSqlExpression() )*
    [ FromClause() ]
    [ WhereClause() ]
    [ ReturningClause() ]
}

void ForLoop():
{}
{
	<K_FOR> ( ObjectName() ("," ObjectName())* <K_IN>
		(
			UnionStatement()
		|
			(PlSqlPrimaryExpression() ".." PlSqlPrimaryExpression())
		)
	)
	Loop()
 }
void Loop():
{}
{
	<K_LOOP>
		PlSqlStatementList()
	<K_END> <K_LOOP>
}

void WhileLoop():
{}
{
	<K_WHILE> PlSqlExpression() Loop()
}

void PerformStatement():
{}
{
	<K_PERFORM> FunctionCall()
}

void DeleteStatement():
{}
{
	<K_DELETE> <K_FROM> ObjectName()
	[ WhereClause() ]
	[ ReturningClause() ]
}

void CaseStatement():
{}
{
	<K_CASE> [ PlSqlExpression() ] <K_WHEN> PlSqlExpression() <K_THEN>
		PlSqlStatementList()
	( <K_WHEN> PlSqlExpression() <K_THEN>
		PlSqlStatementList() )*
	[ <K_ELSE>
		PlSqlStatementList() ]
	<K_END> <K_CASE>
}

void ReturnStatement():
{}
{
    <K_RETURN> [ ([ <K_NEXT> ] PlSqlExpression()) | ( <K_QUERY> SelectStatement() ) ]
}

void LockStatement():
{}
{
	<K_LOCK> <K_TABLE> ObjectName() <K_IN>
	(
			<K_ACCESS_SHARE>
	    |	<K_ROW_SHARE>
		|	<K_ROW_EXCLUSIVE>
		|	<K_SHARE_UPDATE_EXCLUSIVE>
	    |	<K_SHARE>
		|	<K_SHARE_ROW_EXCLUSIVE>
		|	<K_EXCLUSIVE>
		|	<K_ACCESS_EXCLUSIVE>
	)
	<K_MODE>

}

// ALTER FUNCTION /////////////////////////////////////////////////////////////////////////////

void AlterOwnerStatement():
{}
{
	<K_ALTER> (<K_FUNCTION> | <K_TYPE> | <K_TABLE> ) ObjectName() ["(" [ParameterList()] ")"] <K_OWNER> <K_TO> <S_IDENTIFIER>
}

void GrantStatement():
{}
{
	<K_GRANT> Right() ( "," Right() )* <K_ON> ( 
			LOOKAHEAD(4) RightsOnFunction() 
		| 	RightsOnTable() 
	) <K_TO> <S_IDENTIFIER>
}

void RevokeStatement():
{}
{
	<K_REVOKE> Right() ( "," Right() )* <K_ON> ( 
			LOOKAHEAD(4) RightsOnFunction() 
		| 	RightsOnTable() 
	) <K_FROM> <S_IDENTIFIER>
}

void RightsOnFunction():
{}
{
	<K_FUNCTION> ObjectName() ["(" [ParameterList()] ")"]
}

void RightsOnTable():
{}
{
	<K_TABLE> ObjectName()
}

void Right():
{}
{
	<K_ALL> | <K_SELECT> | <K_INSERT> | <K_UPDATE> | <K_DELETE>
}

// TYPES /////////////////////////////////////////////////////////////////////////////////////

void CreateTypeStatement():
{
}
{
	<K_CREATE> <K_TYPE> ObjectName() <K_AS> "(" ParameterList() ")"
}

// TABLES /////////////////////////////////////////////////////////////////////////////////////

void CreateTableStatement():
{
}
{
	<K_CREATE> [ <K_TEMPORARY> ] <K_TABLE> ObjectName() "("
		TableDefinitionEntry() ( "," TableDefinitionEntry() )*
	")"
}

void TableDefinitionEntry():
{}
{
	ConstraintDefinition() | ColumnDefinition()
}

void ColumnDefinition():
{}
{
      Parameter() [ <K_DEFAULT> PlSqlPrimaryExpression()]
      [ <K_NOT> <K_NULL> ]
}

void AlterTable():
{}
{
	<K_ALTER> <K_TABLE> [ <K_ONLY> ] ObjectName() AlterAction()

}

void AlterAction():
{}
{
		<K_ADD> ConstraintDefinition()
	|	<K_ALTER> <K_COLUMN> <S_IDENTIFIER> <K_SET> <K_DEFAULT> PlSqlExpression()
}

void ConstraintDefinition():
{}
{
	<K_CONSTRAINT> ObjectName()
	(
		( <K_PRIMARY_KEY> 	"(" <S_IDENTIFIER> ( "," <S_IDENTIFIER> )* ")" )
	| 	( <K_UNIQUE> 		"(" <S_IDENTIFIER> ( "," <S_IDENTIFIER> )* ")" )
	|	(
			<K_FOREIGN_KEY>	"("  <S_IDENTIFIER> ")" <K_REFERENCES>  ObjectName() [ "(" <S_IDENTIFIER> ")"]
			[ <K_MATCH> ( <K_FULL> | <K_PARTIAL> | <K_SIMPLE>) ]
			[ <K_ON> <K_DELETE> Action() ] [ <K_ON> <K_UPDATE> Action() ]
			[ [ <K_NOT> ] <K_DEFERRABLE> ] [ <K_INITIALLY> ( <K_DEFERRED> | <K_IMMEDIATE> ) ]
		)
	|	( <K_CHECK>	 "(" PlSqlExpression() ")" )
	)
}
void Action():
{}
{
	<K_NO> <K_ACTION> | <K_RESTRICT> | <K_CASCADE> | <K_SET> (<K_NULL> | <K_DEFAULT> )
}

void CreateIndex():
{}
{
	<K_CREATE> [ <K_UNIQUE> ] <K_INDEX> [ <K_CONCURRENTLY> ] <S_IDENTIFIER>
	<K_ON> ObjectName()
	[ <K_USING> ( <K_BTREE> | <K_HASH>  ) ]
		"("
			PlSqlPrimaryExpression() ( "," PlSqlPrimaryExpression() )*
		")"
	[ WhereClause() ]
	[ <K_WITH> "(" <S_IDENTIFIER> ( <S_EQUALS> | <S_ASSIGNER> ) <S_NUMBER> ")" ]
}

void CreateTrigger():
{}
{
	<K_CREATE> <K_TRIGGER> <S_IDENTIFIER>
	( <K_BEFORE> | <K_AFTER> | <K_INSTEAD_OF> ) ( <K_INSERT> | <K_UPDATE> | <K_DELETE> | <K_TRUNCATE> ) ( <K_OR> ( <K_INSERT> | <K_UPDATE> | <K_DELETE> | <K_TRUNCATE> ))*
	<K_ON> ObjectName()
	<K_FOR> <K_EACH> ( <K_ROW> | <K_STATEMENT> )
	<K_EXECUTE> <K_PROCEDURE> FunctionCall()
}

void CommentStatement():
{}
{
	<K_COMMENT> <K_ON> ( <K_TABLE> | <K_COLUMN> | <K_FUNCTION> ) ObjectName() ["(" [ParameterList()] ")"] <K_IS> <S_CHAR_LITERAL>
}